import { MyContext, MyConversation } from '.';
import { createUser, getRegions } from '../../../services/backend';

const regionsTranslate = {
  vinnytsia: '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞',
  volyn: '–í–æ–ª–∏–Ω—Å—å–∫–∞',
  dnipropetrovsk: '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞',
  donetsk: '–î–æ–Ω–µ—Ü—å–∫–∞',
  zhytomyr: '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞',
  zakarpattia: '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞',
  zaporizhzhia: '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞',
  ivano_frankivsk: '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞',
  kyiv: '–ö–∏—ó–≤—Å—å–∫–∞',
  kirovohrad: '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞',
  luhansk: '–õ—É–≥–∞–Ω—Å—å–∫–∞',
  lviv: '–õ—å–≤—ñ–≤—Å—å–∫–∞',
  Lviv: '–õ—å–≤—ñ–≤—Å—å–∫–∞',
  mykolaiv: '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞',
  odessa: '–û–¥–µ—Å—å–∫–∞',
  poltava: '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞',
  rivne: '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞',
  sumy: '–°—É–º—Å—å–∫–∞',
  ternopil: '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞',
  kharkiv: '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞',
  kherson: '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞',
  khmelnytskyi: '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞',
  cherkasy: '–ß–µ—Ä–∫–∞—Å—å–∫–∞',
  chernivtsi: '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞',
  chernihiv: '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞',
  crimea: '–ö—Ä–∏–º',
};

const getListUARegions = (regions: string[]) => {
  const availableRegions: string[] = [];
  const regionsTranslateEntries = Object.entries(regionsTranslate);
  for (const region of regions) {
    const foundRegion = regionsTranslateEntries.find(([key, value]) => region === key);
    if (foundRegion) {
      availableRegions.push(foundRegion[1]);
    }
  }
  return availableRegions;
};

export default async (conversation: MyConversation, ctx: MyContext) => {
  await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ü–º—è:');
  const username = await conversation.form.text();
  await ctx.reply(`–í–∞—à–µ —ñ–º'—è, ${username}`);

  await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:');
  const { msg: dateOfBirthMsg } = await conversation.waitUntil(
    ctx => {
      // TODO: update Date and move to config
      const dateRegExp = new RegExp(/^\d{1,2}\.\d{1,2}\.\d{2,4}$/);
      const isDate = dateRegExp.test(ctx.msg?.text ?? '');

      return isDate;
    },
    {
      otherwise: ctx => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –¥–∞—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ 09.12.2023'),
    },
  );
  if (!dateOfBirthMsg) throw new Error('incorrect date of birth');
  const dateOfBirth = dateOfBirthMsg.text;

  await ctx.reply(`–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, ${dateOfBirth}`);

  await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:');
  const {
    msg: { text: phone },
  } = await conversation.waitFor('msg::phone_number', {
    otherwise: ctx => ctx.reply('–ë—É–¥—å-–ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. +380123456789'),
  });
  await ctx.reply(`–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, ${phone}`);

  const regions = await getRegions();
  const translatedRegions = getListUARegions(regions);
  const usersRegions = `\n- ${translatedRegions.join('\n- ')}`;
  await ctx.reply(`–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è:${usersRegions}`);
  const region = await conversation.form.select(translatedRegions, ctx =>
    ctx.reply(`–ë—É–¥—å-–ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω –∞–±–æ –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É:${usersRegions}`),
  );
  await ctx.reply(`–û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è, ${region}`);

  await ctx.reply('–ß–∏ —Ö–æ—á–µ—Ç–µ –≤–∏ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –ø—Ä–æ–≥—Ä–∞–º—ñ ¬´–ü–æ–º—ñ—á–Ω–∏–∫ –≤–µ—Ç–µ—Ä–∞–Ω–∞¬ª?');
  const takePartInProject = await conversation.form.select(['–¢–∞–∫', '–ù—ñ']);
  await ctx.reply(`–í–∏ —Å–∫–∞–∑–∞–ª–∏ ${takePartInProject} –Ω–∞ —É—á–∞—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç—ñ`);

  const finalMessage = `–Ü–º'—è: ${username}\n–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${dateOfBirth}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, ${phone}\n–û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è: ${region}\n–í–∏ —Å–∫–∞–∑–∞–ª–∏ ${takePartInProject} –Ω–∞ —É—á–∞—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç—ñ`;
  await ctx.reply(`–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–æ:\n\n${finalMessage}`);

  await createUser({ username, dateOfBirth, phone, region, takePartInProject });
  await ctx.reply(`–í—ñ—Ç–∞—î–º–æüéâ\n –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ <b>–ü–æ–º—ñ—á–Ω–∏–∫ –≤–µ—Ç–µ—Ä–∞–Ω–∞</b>`);

  // await ctx.conversation.exit();
};
